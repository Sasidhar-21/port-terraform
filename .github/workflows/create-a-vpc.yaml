name: Provision a VPC

on:
  workflow_dispatch:
    inputs:
      vpc_name:
        description: VPC name
        required: true
        default: 'Main VPC'
        type: string
      vpc_cidr:
        description: VPC CIDR block
        required: true
        type: string
      region:
        description: AWS region
        required: true
        default: "us-west-2"
        type: string
      port_context:
        description: Includes blueprint, run ID, and entity identifier from Port.
        required: true

env:
  TERRAFORM_PATH: 'vpc'
  
jobs:
  provision-vpc:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Log starting of VPC creation 
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).run_id }}
          logMessage: |
            About to create VPC ${{ github.event.inputs.vpc_name }} in region ${{ github.event.inputs.region }} with CIDR ${{ github.event.inputs.vpc_cidr }} .. ⛴️

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TF_USER_AWS_KEY }}
          aws-secret-access-key: ${{ secrets.TF_USER_AWS_SECRET }}
          aws-region: ${{ github.event.inputs.region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
          
      - name: Terraform Apply
        id: apply
        env:
          TF_VAR_vpc_name: ${{ github.event.inputs.vpc_name }}
          TF_VAR_vpc_cidr: ${{ github.event.inputs.vpc_cidr }}
          TF_VAR_region: ${{ github.event.inputs.region }}
        run: |
          cd ${{ env.TERRAFORM_PATH }}
          terraform init
          terraform validate
          terraform plan 
          terraform apply -auto-approve

      - name: Set Outputs
        id: set_outputs
        run: |
          cd ${{ env.TERRAFORM_PATH }}
          echo "vpc_id=$(terraform output -raw vpc_id)" >> $GITHUB_ENV
          echo "region=$(terraform output -raw region)" >> $GITHUB_ENV
          echo "public_subnet_id=$(terraform output -raw public_subnet_id)" >> $GITHUB_ENV
          tags=$(terraform output -json tags | jq -c .)
          echo "tags=$tags" >> $GITHUB_ENV

      - name: Create a log message
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).run_id }}
          logMessage: |
            VPC created successfully ✅

      - name: Report Created VPC to Port
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).run_id }}
          logMessage: "Upserting created VPC to Port ... "
          
      - name: UPSERT VPC Entity
        uses: port-labs/port-github-action@v1
        with:
          identifier: "${{ env.vpc_id }}"
          title: "${{ github.event.inputs.vpc_name }}"
          blueprint: ${{ fromJson(inputs.port_context).blueprint }}
          properties: |-
            {
              "region": "${{ env.region }}",
              "public_subnet_id": "${{ env.public_subnet_id }}",
              "tags": ${{ env.tags }}
            }
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: UPSERT
          runId: ${{ fromJson(inputs.port_context).run_id }}

      - name: Log After Upserting Entity
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).run_id }}
          logMessage: "Entity upserting was successful ✅"
